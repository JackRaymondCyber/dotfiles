# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import os
import subprocess

from libqtile import bar, layout, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from widgets.volume import Volume

colors = []
cache='/home/zam/.cache/wal/colors'
def load_colors(cache):
    with open(cache, 'r') as file:
        for i in range(8):
            colors.append(file.readline().strip())
    colors.append('#ffffff')
    lazy.reload()
load_colors(cache)

@lazy.function
def show_box(qtile):
    wbox.cmd_toggle()

mod = "mod4"
terminal = guess_terminal()

keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    {{- if eq .chezmoi.hostname "t480s" }}
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    {{- else }}
    Key([mod], 'space', lazy.next_screen(), desc='Next monitor'),
    {{- end }}
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "w", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "d", lazy.spawn("rofi -show drun"), desc="Spawn a command using rofi"),
    Key([mod], "c", lazy.spawn("firefox")),
    Key([mod], "f", lazy.spawn("pcmanfm")),
    Key([mod, "shift"], "f", lazy.window.toggle_fullscreen(), desc="toggle fullscreen"),
    Key([mod], "0", lazy.spawn("/home/zam/.local/bin/exit")),
    Key([],"Print", lazy.spawn("flameshot gui")),
    Key([mod],"grave", lazy.spawn("/home/zam/.local/bin/bmark")),
    Key([], 'XF86AudioRaiseVolume', lazy.spawn("pamixer -i 2")),
    Key([], 'XF86AudioLowerVolume', lazy.spawn("pamixer -d 2")),
    Key([], 'XF86AudioMute', lazy.spawn("amixer sset Master 0%")),
    {{- if eq .chezmoi.hostname "t480s" }}
    Key([], 'XF86Tools', lazy.spawn("rofi -show scripts")),
    Key([], 'XF86Favorites', show_box),
    {{- else }}
    Key([mod], 'Home', lazy.spawn("rofi -show scripts")),
    Key([], 'Home', show_box),
    {{- end }}
    Key([mod, "shift"], "space", lazy.window.toggle_floating()),
]

groups = [Group(i) for i in "123456789"]

groups[0].label=" WWW"
groups[1].label="漣 SYS"
groups[2].label=" CHT"
groups[3].label=" DEV"
groups[4].label=" DOC"

groups[0].init=True
groups[1].init=True
groups[2].init=True
groups[3].init=True
groups[4].init=True

groups[1].spawn="alacritty"
groups[2].spawn="discord"
groups[4].spawn="pcmanfm"

groups[0].persist=True
groups[1].persist=True
groups[2].persist=True
groups[3].persist=True
groups[4].persist=True

groups[0].matches=[Match(wm_class=('firefox'))]
#groups[0].exclusive=True
groups[3].matches=[Match(wm_class=('Emacs'))]
#groups[3].exclusive=True
groups[4].matches=[Match(wm_class=('wpp')),Match(wm_class=('wps')),Match(wm_class=('et'))]
groups[5].matches=[Match(wm_class=('looking-glass-client'))]

for i in groups:
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + letter of group = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + letter of group = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

layouts = [
    layout.Columns(border_focus_stack=["#d75f5f", "#8f3d3d"],border_focus=colors[2], border_width=4),
    layout.Max(),
    # Try more layouts by unleashing below layouts.
    #layout.Stack(num_stacks=2),
     #layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

widget_defaults = dict(
    font="FiraCode Nerd Font",
    {{- if eq .chezmoi.hostname "t480s" }}
    fontsize=26,
    padding=10,
    {{- else }}
    fontsize=18,
    padding=3,
    {{- end }}
    background=colors[0]
)
extension_defaults = widget_defaults.copy()

wbox=widget.WidgetBox(widgets=[
    widget.Sep(),
    {{- if eq .chezmoi.hostname "t480s" }}
    widget.Systray(icon_size=35),
    {{- else }}
    widget.Systray(icon_size=24),
    {{- end }}
    widget.Sep(),
    widget.Pomodoro(fmt='{}', color_inactive='ffffff', prefix_inactive='  '),
    widget.Sep(),
    widget.OpenWeather(app_key='7fbeb119bf55b9b688087faf2dd4ba3c', zip='92649', weather_symbols={
        "Unknown": "",
        "01d": "",
        "01n": "",
        "02d": "",
        "02n": "",
        "03d": "摒",
        "03n": "摒",
        "04d": "",
        "04n": "",
        "09d": "",
        "09n": "",
        "10d": "",
        "10n": "",
        "11d": "",
        "11n": "",
        "13d": "",
        "13n": "",
        "50d": "",
        "50n": ""}, format='{icon} {main_temp: .0f}°', metric=False),
    widget.Sep(),
    widget.CheckUpdates(distro='Arch', colour_have_updates = '09AE51', display_format=' {updates}', no_update_string=' 0'),
    ]
)

screens = [
    Screen(
        bottom=bar.Bar(
            [
                widget.CurrentLayoutIcon(scale=0.8),
                widget.GroupBox(hide_unused=True, spacing=0, this_current_screen_border=colors[2],disable_drag=True),
                widget.Prompt(),
                #widget.WindowName(max_chars=30),
                {{- if eq .chezmoi.hostname "t480s" }}
                widget.TaskList(max_title_width=400,icon_size=35,border=colors[2]),
                {{- else }}
                widget.TaskList(max_title_width=400,icon_size=24,border=colors[2]),
                {{- end }}
                widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                wbox,
                widget.Sep(),
                {{- if eq .chezmoi.hostname "t480s" }}
                widget.Wlan(interface="wlp61s0",format=" {percent:2.0%}"),
                {{- else }}
                widget.Wlan(interface="wlp5s0",format=" {percent:2.0%}"),
                {{- end }}
                widget.Sep(),
                widget.Memory(format='{MemPercent: .0f}%'),
                widget.Sep(),
                widget.CPU(format=' {load_percent:02.0f}%'),
                widget.Sep(),
                {{- if eq .chezmoi.hostname "t480s" }}
                widget.Battery(format='{char} {percent:2.0%}',unknown_char='',full_char='', charge_char='', discharge_char=''),
                widget.Sep(),
                {{- end }}
                #widget.Volume(fmt="墳 {}",update_interval=0.1, get_volume_command='pamixer --get-volume'),
                Volume(
                    **widget_defaults,
                    fmt = " {}",
                    # Control volume with pactl
                    # get_volume_command = "pactl get-sink-volume @DEFAULT_SINK@",
                    # check_mute_command = "pactl get-sink-mute @DEFAULT_SINK@",
                    # check_mute_string = "yes",
                    # volume_up_command = "pactl set-sink-volume @DEFAULT_SINK@ +2%",
                    # volume_down_command = "pactl set-sink-volume @DEFAULT_SINK@ -2%",
                    # mute_command = "pactl set-sink-mute @DEFAULT_SINK@ toggle",
                    # Control volume with pamixer
                    get_volume_command = "pamixer --get-volume-human",
                    check_mute_command = "pamixer --get-mute",
                    check_mute_string = "true",
                    volume_up_command = "pamixer -i 2",
                    volume_down_command = "pamixer -d 2",
                    mute_command = "pamixer -t",
                    mouse_callbacks = {'Button3': lambda: qtile.cmd_spawn("easyeffects")}
                ),
                widget.Sep(),
                widget.Clock(format=" %m/%d"),
                widget.Sep(),
                widget.Clock(format=" %I:%M"),
            ],
            {{- if eq .chezmoi.hostname "t480s" }}
            55,
            {{- else }}
            32,
            {{- end }}
            opacity=0.9,
            # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
    ),
    {{- if eq .chezmoi.hostname "mbox" }}
    Screen(
        bottom=bar.Bar(
            [
                widget.CurrentLayoutIcon(scale=0.8),
                widget.GroupBox(hide_unused=True, spacing=0, this_current_screen_border=colors[2],disable_drag=True),
                widget.Prompt(),
                #widget.WindowName(max_chars=30),
                {{- if eq .chezmoi.hostname "t480s" }}
                widget.TaskList(max_title_width=400,icon_size=35,border=colors[2]),
                {{- else }}
                widget.TaskList(max_title_width=400,icon_size=24,border=colors[2]),
                {{- end }}
                widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                wbox,
                widget.Sep(),
                {{- if eq .chezmoi.hostname "t480s" }}
                widget.Wlan(interface="wlp61s0",format=" {percent:2.0%}"),
                {{- else }}
                widget.Wlan(interface="wlp5s0",format=" {percent:2.0%}"),
                {{- end }}
                widget.Sep(),
                widget.Memory(format='{MemPercent: .0f}%'),
                widget.Sep(),
                widget.CPU(format=' {load_percent:02.0f}%'),
                widget.Sep(),
                {{- if eq .chezmoi.hostname "t480s" }}
                widget.Battery(format='{char} {percent:2.0%}',unknown_char='',full_char='', charge_char='', discharge_char=''),
                widget.Sep(),
                {{- end }}
                #widget.Volume(fmt="墳 {}",update_interval=0.1, get_volume_command='pamixer --get-volume'),
                Volume(
                    **widget_defaults,
                    fmt = " {}",
                    # Control volume with pactl
                    # get_volume_command = "pactl get-sink-volume @DEFAULT_SINK@",
                    # check_mute_command = "pactl get-sink-mute @DEFAULT_SINK@",
                    # check_mute_string = "yes",
                    # volume_up_command = "pactl set-sink-volume @DEFAULT_SINK@ +2%",
                    # volume_down_command = "pactl set-sink-volume @DEFAULT_SINK@ -2%",
                    # mute_command = "pactl set-sink-mute @DEFAULT_SINK@ toggle",
                    # Control volume with pamixer
                    get_volume_command = "pamixer --get-volume-human",
                    check_mute_command = "pamixer --get-mute",
                    check_mute_string = "true",
                    volume_up_command = "pamixer -i 2",
                    volume_down_command = "pamixer -d 2",
                    mute_command = "pamixer -t",
                    mouse_callbacks = {'Button3': lambda: qtile.cmd_spawn("easyeffects")}
                ),
                widget.Sep(),
                widget.Clock(format=" %m/%d"),
                widget.Sep(),
                widget.Clock(format=" %I:%M"),
            ],
            {{- if eq .chezmoi.hostname "t480s" }}
            55,
            {{- else }}
            32,
            {{- end }}
            opacity=0.9,
            # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
    ),
    {{- end }}
]



# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"

# STARTUP APPLICATIONS
#@hook.subscribe.startup
#def runner():
    #subprocess.Popen(['fix_xcursor'])

#exec_always --no-startup-id fix_xcursor

@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser('~/.config/qtile/autostart.sh')
    subprocess.run([home])
